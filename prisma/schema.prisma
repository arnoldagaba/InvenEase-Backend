/// Prisma schema for Inventory Management System

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ENUMS

/// Roles for application users
enum Role {
  ADMIN
  MANAGER
  STAFF
}

/// Token types for authentication flows
enum TokenType {
  ACCESS
  REFRESH
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

/// Status of a purchase order
enum OrderStatus {
  PENDING
  APPROVED
  SHIPPED
  DELIVERED
  CANCELLED
}

/// Types of system notifications
enum NotificationType {
  LOW_STOCK
  ORDER_STATUS
  SYSTEM
  TASK
}

/// Optional categorization status for inventory items
enum InventoryStatus {
  ACTIVE
  ON_HOLD
  UNDER_INSPECTION
  DISCONTINUED
}

/// Reasons for inventory transactions
enum TransactionType {
  PURCHASE
  SALE
  ADJUSTMENT
  TRANSFER
  RETURN
  DAMAGED
  EXPIRED
}

/// Payment status for orders
enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  CANCELLED
  REFUNDED
}

/// MODELS

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(STAFF)
  phone     String?
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  tokens            Token[]
  activity          ActivityLog[]
  warehouses        Warehouse[]            @relation("UserWarehouses")
  orders            Order[]
  notifications     Notification[]
  inventoryChanges  InventoryTransaction[]
  orderDocuments    OrderDocument[]
  InventoryTransfer InventoryTransfer[]

  @@index([role])
  @@index([email])
  @@index([isActive])
}

model Token {
  id         String    @id @default(uuid())
  token      String    @unique
  type       TokenType
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  expiresAt  DateTime
  lastUsed   DateTime?
  deviceInfo String?
  ipAddress  String?
  createdAt  DateTime  @default(now())

  @@index([token])
  @@index([type])
  @@index([expiresAt])
  @@index([userId])
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  parentId    String? // For hierarchical categories
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  products Product[]

  @@index([parentId])
}

model Warehouse {
  id        String    @id @default(uuid())
  name      String
  address   String
  city      String?
  state     String?
  country   String?
  zipCode   String?
  phone     String?
  manager   User      @relation("UserWarehouses", fields: [managerId], references: [id], onDelete: Restrict)
  managerId String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  inventory         InventoryItem[]
  transfers         InventoryTransfer[] @relation("SourceWarehouse")
  receivedTransfers InventoryTransfer[] @relation("DestinationWarehouse")

  @@unique([name, address])
  @@index([managerId])
  @@index([isActive])
}

model Supplier {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  zipCode       String?
  website       String?
  contactPerson String?
  notes         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  orders   Order[]
  products Product[] @relation("ProductSuppliers")

  @@index([isActive])
  @@index([name])
}

model Product {
  id           String    @id @default(uuid())
  sku          String    @unique
  name         String
  description  String?
  barcode      String?   @unique
  category     Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId   String?
  unitPrice    Int       @default(0)
  costPrice    Int       @default(0)
  weight       Float? // In kg
  dimensions   Json? // {length, width, height}
  brand        String?
  manufacturer String?
  tags         String[]
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  inventory  InventoryItem[]
  orderItems OrderItem[]
  attributes ProductAttribute[]
  suppliers  Supplier[]         @relation("ProductSuppliers")
  images     ProductImage[]

  @@index([sku])
  @@index([name])
  @@index([categoryId])
  @@index([isActive])
}

model ProductAttribute {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  name      String // e.g., "Color", "Size", "Material"
  value     String // e.g., "Red", "Large", "Cotton"

  @@unique([productId, name, value])
  @@index([productId])
}

model ProductImage {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([productId])
}

model InventoryItem {
  id              String          @id @default(uuid())
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String
  warehouse       Warehouse       @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId     String
  quantity        Int             @default(0)
  minStockLevel   Int             @default(0)
  maxStockLevel   Int?
  reorderPoint    Int             @default(5)
  locationDetails String? // specific location within warehouse
  batchNumber     String?
  expirationDate  DateTime?
  status          InventoryStatus @default(ACTIVE)
  lastRestocked   DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  transactions InventoryTransaction[]

  @@unique([productId, warehouseId])
  @@index([productId])
  @@index([warehouseId])
  @@index([status])
  @@index([warehouseId, status])
  @@index([batchNumber])
  @@index([expirationDate])
}

model InventoryTransaction {
  id               String          @id @default(uuid())
  inventoryItem    InventoryItem   @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  inventoryItemId  String
  previousQuantity Int
  newQuantity      Int
  changeAmount     Int // The delta (can be positive or negative)
  transactionType  TransactionType
  referenceId      String? // Optional ID of related entity (e.g., Order ID)
  referenceType    String? // Type of reference (e.g., "Order", "Transfer", "Adjustment")
  notes            String?
  performedBy      User            @relation(fields: [userId], references: [id])
  userId           String
  timestamp        DateTime        @default(now())

  @@index([inventoryItemId, timestamp])
  @@index([transactionType])
  @@index([userId])
  @@index([referenceId, referenceType])
}

model InventoryTransfer {
  id                String    @id @default(uuid())
  sourceWarehouse   Warehouse @relation("SourceWarehouse", fields: [sourceWarehouseId], references: [id])
  sourceWarehouseId String
  destWarehouse     Warehouse @relation("DestinationWarehouse", fields: [destWarehouseId], references: [id])
  destWarehouseId   String
  initiatedBy       User      @relation(fields: [userId], references: [id])
  userId            String
  transferDate      DateTime  @default(now())
  status            String // e.g., "Pending", "In Transit", "Completed", "Cancelled"
  notes             String?

  items TransferItem[]

  @@index([sourceWarehouseId])
  @@index([destWarehouseId])
  @@index([status])
  @@index([transferDate])
}

model TransferItem {
  id         String            @id @default(uuid())
  transfer   InventoryTransfer @relation(fields: [transferId], references: [id], onDelete: Cascade)
  transferId String
  productId  String
  quantity   Int
  notes      String?

  @@index([transferId])
  @@index([productId])
}

model Order {
  id               String        @id @default(uuid())
  orderNumber      String        @unique
  status           OrderStatus   @default(PENDING)
  supplier         Supplier      @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  supplierId       String
  creator          User          @relation(fields: [creatorId], references: [id], onDelete: Restrict)
  creatorId        String
  expectedDelivery DateTime?
  deliveredDate    DateTime?
  totalAmount      Decimal       @db.Decimal(12, 2)
  paymentStatus    PaymentStatus @default(PENDING)
  paymentDueDate   DateTime?
  paymentDate      DateTime?
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?

  items         OrderItem[]
  notifications Notification[]
  activity      ActivityLog[]
  documents     OrderDocument[]

  @@index([status])
  @@index([orderNumber])
  @@index([supplierId])
  @@index([creatorId])
  @@index([createdAt])
  @@index([supplierId, status])
  @@index([paymentStatus])
}

model OrderItem {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId  String
  quantity   Int
  unitPrice  Decimal  @db.Decimal(12, 2)
  totalPrice Decimal  @db.Decimal(12, 2)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model OrderDocument {
  id           String   @id @default(uuid())
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String
  documentType String // e.g., "Invoice", "Receipt", "Packing List"
  filename     String
  fileUrl      String
  uploadedBy   User     @relation(fields: [userId], references: [id])
  userId       String
  uploadedAt   DateTime @default(now())

  @@index([orderId])
  @@index([documentType])
  @@index([userId])
}

model Notification {
  id          String           @id @default(uuid())
  type        NotificationType
  message     String
  recipient   User             @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String
  order       Order?           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String?
  payload     Json? // Additional data related to the notification
  seen        Boolean          @default(false)
  read        Boolean          @default(false) // Track if notification was read, not just seen
  createdAt   DateTime         @default(now())

  @@index([type])
  @@index([recipientId])
  @@index([orderId])
  @@index([seen])
  @@index([read])
  @@index([createdAt])
}

model ActivityLog {
  id          String   @id @default(uuid())
  entityType  String // The type of entity being logged (e.g., "Product", "Order")
  entityId    String // The ID of the specific entity
  action      String // e.g. CREATE, UPDATE, DELETE, RECEIVE
  performedBy User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  timestamp   DateTime @default(now())
  details     Json? // Additional information about the activity
  ipAddress   String?
  userAgent   String?

  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String?

  @@index([entityType, entityId])
  @@index([userId])
  @@index([timestamp])
  @@index([orderId])
}

// Settings model for system configuration
model SystemSettings {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  updatedBy   String?
  updatedAt   DateTime @default(now())

  @@index([key])
}
